#!/usr/bin/env bash
##
# COLORS
# I must have farted a thousand times during these flights... muahahah
# ~/.bash-tui/.cached-colors
# BTUI_s[red]=34
# BTUI_n[34]=red
export BTUI_ctop=256
export NC="\e[0;0m" ## NC doesn't exist on the 256 table
export BTUI_cache=~/.bash-tui/.cached-colors
export BTUI_configs=(/etc/bash-tui-colors.conf ~/.bash-tui-colors.conf) # Lowest to highest priority

colorcache() {
  x=
for i in 1;do
  [ ! -z $1 ] && [ "$1" = '-s' ] && x=2 && break
  uf=
  declare -a TMPC=
  for f in ${BTUI_configs[@]};do
    [ ! -e "$f" ] && continue
    uf=1
    for cl in $(cat "${f}" | grep -e '^[[:space:]]*colorset' | sed -E "s/^[[:space:]]*colorset[[:space:]]{1,}([0-9]{1,})[[:space:]]{1,}([a-zA-Z]+[a-zA-Z0-9]*)$/TMPC[\1]=\2/g"); do
      # we create the TMPC
      ## TODO: I don't like evals...
      eval "${cl}"
    done 
  done
  [ -z $uf ] && echo "ERROR: There was a problem importing your colors..." && return 1
done
  [ -z "${TMPC[*]}" ] && echo "ERROR: I could not find any colors from your defaults, check the documentation." && return 1
  ## TODO: the cache file can be multisession, but I don't feel like it right now
  ## you can just slam them in there .bash-tui/.sessions/hdf6t32rg23.colors
  ## but first you need to create bash-tui sessions
  echo "#!/usr/bin/env bash" > $BTUI_cache
  echo "## BASH-TUI: File autogenerated, don't modify this, use colorset/colorimport/colorcache instead" >> $BTUI_cache
  echo "declare -A BTUI_s=" >> $BTUI_cache
  echo "declare -a BTUI_n=" >> $BTUI_cache
  # Easy Mapping
  for c in $(seq 0 ${BTUI_ctop}); do
    if [ ! -z ${TMPC[$c]+_} ]; then
      echo "BTUI_s[${TMPC[${c}]}]=${c}" >> $BTUI_cache
      echo "BTUI_n[$c]=${TMPC[${c}]}" >> $BTUI_cache 
    #else
      #echo "BTUI_s[C$c]=${c}" >> $BTUI_cache && continue
    fi
  done
  echo "## Colors cached on $(date)" >> $BTUI_cache
  unset TMPC # good boys clean up after themselves
return 0
}


## Import colors
# this is rather cheap if you simply load and reload the same tiny file over and over
colorimport() {
  [ ! -e $BTUI_cache ] && colorcache 
  [ ! -e $BTUI_cache ] && echo "ERROR: There was a problem with your color cache file $BTUI_cache." && return 1 
  . $BTUI_cache
}
## Get Colors
# imports colors, prints the color you asked via number
colorget() { 
  colorimport
  Bc="\e[38;5;%dm"
  Bph="Cantami o diva del pelide Achille l'ira funesta..."
  _c=$(printf $Bc $1)
  if [ -z $2 ];then
    cc=$1
echo "AA $1 - ${BTUI_n[$1]}"
    [ ! -z ${BTUI_n[$1]+_} ] && cc=${BTUI_n[$1]}
    echo -e "${_c}$Bph : $cc ${NC}"
    return 0
  fi
  colorset $1 $2
}
## Set a new color
# you want to set a new color? there ya go..
colorset() {
  colorimport
  [ -z $1 ] && ( ! [[ $1 =~ [0-9]+ ]] ) && echo "ERROR: I need a color id as first parameter between 0 and ${BTUI_ctop}" && return 1
  [ -z $2 ] && ( ! [[ $2 =~ [a-zA-Z]+[a-zA-Z0-9]* ]] ) && echo "ERROR: I need a color name as second parameter starting with a letter" && return 1

  # The color will be set unless it exists already with the same name... for obviousliestest reasons
  ( [ -z "${BTUI_n[$1]+_}" ] || [ "${BTUI_n[$1]}" != "$2"  ] ) && declare -a Bclrs= && Bclrs[$1]=$2 && colorsave && return 0
  return 2
}
## This always happen after a change
# gets the floating list of colors
# and puts it in the cache file
## This expects a Bclrs previously set
colorsave() {
  (( ! ${Bclrs[#]} )) && echo "ERROR: You cannot use colorsave by itself..." && return 1
  declare -a TMPC=
  for c in $(seq 0 ${BTUI_ctop}); do
    if [ ! -z ${Bclrs[$c]+_} ]; then
      TMPC[$c]=${Bclrs[$c]}
    elif [ ! -z ${BTUI_n[$c]+_} ]; then
      TMPC[$c]=${BTUI_n[$c]}
    fi
  done
  colorcache -s && colorimport && return 0
return 1
}
# Show rainbow
colorshow() {
  colorimport
  for c in $(seq 0 ${BTUI_ctop}); do
    colorget $c
  done
}
# Export your customs
colorexport() {
  colorimport
  for c in $(seq 0 ${BTUI_ctop}); do
    [ "${Bclrs[$c]}" != "C${c}" ] && echo "$c ${Bclrs[$c]}"
  done
}
# Cause I said so
colorreset() {
  colorcache
}

##### DO IT
# cache colors
colorcache 
