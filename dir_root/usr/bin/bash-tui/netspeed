#!/usr/bin/env bash
##

## BASE BRAIN - Get where you're from and who you are.
MYPID=$$
ORIGINAL_DIR="$(pwd)" # This is not a hot air balloon ride..
fa="$0" # First Assumption
ta= # Temporary Assumption
wa= # Weighed Assumption
while true; do
    [ "${fa:0:1}" = "/" ] && wa=$0 && break
    [ "${fa:0:2}" = "./" ] && ta="${ORIGINAL_DIR}/${fa:2}" && [ -e "$ta" ] && wa="$ta" && break
    ta="${ORIGINAL_DIR}/${fa}" && [ -e "$ta" ] && wa="$ta" && break
done
SW="$wa"
SWDIR="$(dirname "$wa")"
SWBIN="$(basename "$wa")"
unset ta fa wa
( [ ! -e "$SWDIR/$SWBIN" ] || [ -z "$SW" ] ) && echo "I could not find my way around :( possible bug in the TOP script" && exit 1

### Libraries

. /etc/profile.d/20_rosterlib.sh
. /usr/lib/bash-tui/bashparms.sh

## If you need help, getHelp
isParm help && _BP_getHelp && exit 113

## TODO how do we log this? how can you log both the line and the value without it looking unreadable?

##
## Tracks speed and traffic for an interface given
## if you don't give me an interface I'll get what I think is default
eth=$(getParm i) || eth=$(ip -4 route list 0/0 | awk '{print $5}' | head -n1) ##BP: Ethernet interface (default: first interface with gateway)
RX=/sys/class/net/$eth/statistics/rx_bytes
TX=/sys/class/net/$eth/statistics/tx_bytes
# Max Speed in Mbit/s
MS=$(getParm maxSpeed) || MS=$(cat /sys/class/net/$eth/speed | xargs) ##BP: Max Speed in mbit/s (default: gets the speed from the interface)
MS_bytes=$(( ( MS * 1024 * 1024 ) / 8 ))

( [ ! -e ${RX} ] || [ ! -e ${TX} ] ) && say "Make sure $eth is correct..." error && exit 1

#### CONF
##

TIME_start=$(date +%s)

TX_start=$(cat $TX | xargs)
TX_speed=0
TX_pretty=0
TX_weight=0
TX_end=0

RX_start=$(cat $RX | xargs)
RX_speed=0
RX_pretty=0
RX_weight=0
RX_end=0

TIME_pretty=0

pipe="$(getParm pipe)" || pipe='-' ##BP: Magnitude character

### TABs
## 
## Window Size
WINDOW_width=0
## Size of the window now
WINDOW_now=0
## Size of the window at the last iteration
WINDOW_was=0
## This is the minimum size of the fields
TAB_min=20
## This is the differential I calculate when getting the whole
TAB_diff=4
## The tab right now
TAB_now=0

## How many columns does TIME take? usually 24 | Time:2019-01-09 22:53:51
COLS_time=24

#### METHODS
##

## Now I add a little graph on top, why? why not...
_netspeed_graph()
{
  [ -z "$1" ] && exit 48 || B=$1
  [ -z "$2" ] && exit 48 || A=$2

  graph=' '

  ## let's keep it simple for now
  if [ $B -gt $A ]; then
    graph+='/'
    graph+="$(printf %0$(( B - A - 1 ))s|tr \  '"')"
  elif [ $B -lt $A ]; then
    graph+='\\'
  else
    graph+='|'
  fi
  # now just blurt it out
  echo "$graph"
return 0
}

## I decided to scale this in 4 sections of 5, 10, 10, 10 dots/dashes/equals.
# -> _netspeed_liner SPEED_Bps 
_netspeed_liner()
{
  [ -z "$1" ] && exit 50
  _speed=$1

  ## This is the size of the tab minus a differential, just to avoid stuff overlapping
  TAB_safe=$(( TAB_now - TAB_diff ))
  
  # The single unit of bandwidth. We have a max of TAB_safe 
  MS_slot=$(( MS_bytes / TAB_safe ))

  ## Starting score
  _score=1
  ## Now calculate how many characters to represent the speed
  while true; do
    (( ! $_speed )) && _score=0 && break

    for (( m=$(( ${TAB_safe} - 1 )); m>0; m--)); do
      (( $(( _speed / ( MS_slot * m ) )) )) && (( _score += m )) && break 2
    done

    break
  done
  echo "${_score}"
return 0
}
# -> _netspeed_pretty IT_weight 'T' 1/0
# original value, Array of magnitude (GB, MB etc), Recursive magnitude
_netspeed_pretty()
{
  ## 1024 or 1000...
  kbv=1024 
  declare -A Ss=(
    [G]=$((kbv * kbv * kbv))
    [M]=$((kbv * kbv))
    [K]=${kbv}
    [b]=1
  )
  declare -a So=( G M K b )
  
  ## TIME
  declare -A Ts=(
    [d]=$((60 * 60 * 24))
    [h]=$((60 * 60))
    [m]=60
    [s]=1
  )
  declare -a To=( d h m s )

  # The remainder during the operations
  IT_rest=
  # The final string
  IT_pretty=''
  # The initial value, mandatory
  IT_weight=$1 || return 23
  # The name of the array in which you have the order of magnitude (GB. MB... etc)
  [ ! -z "$2" ] && L_name=$2 || L_name=S
  # If you want the magnitude to be recursive: 1 (eg. 3G,24M,14K,3b), or if you want to stop at the first occurrence: 0 (eg. 1GB)
  [ ! -z "$3" ] && recursive=$3 || recursive=0

  declare -A Ls
  declare -a Lo
  eval "Lo=( \"\${${L_name}o[@]}\" )"

  # yeah I know this is violently convoluted, so what?
  d=0
  for (( c=0; c<${#Lo[@]}; c++ )); do
    ## basically assigning the associative array back in for reference
    Ls[${Lo[$c]}]=$(eval "echo \${${L_name}s[${Lo[$c]}]}")
    IT_tmp=$(( $IT_weight / ${Ls[${Lo[$c]}]} ))
    ## Some Value?
    if (( $IT_tmp )); then 
      (( $d )) && IT_pretty+=','
      IT_pretty+="${IT_tmp}${Lo[$c]}"
      ## if we want to make this recursive...
      ((d++))
      if (( $recursive )); then
        IT_rest=$(( $IT_weight % ${Ls[${Lo[$c]}]} ))
        ## So if we have any rest, we'll rest it
        (( $IT_rest )) && IT_weight=$IT_rest || break
      else
        break
      fi
    fi
  done
  echo "${IT_pretty}"
return 0
}

## Get the tabs size
_netspeed_getTabs()
{
  ## I calculate it as the whole length, minus the time and divided by 2
  TAB_now=$(( ( WINDOW_now - COLS_time ) / 2 ))
  ## But if it's too tiny, then revert to the default
  [ $TAB_now -lt $TAB_min ] && TAB_now=${TABS_min}
  echo $TAB_now
return 0
}

#### The stupid software
##

sleep 1

## And now let's do some me.. math
echo -e "\n${yellow}Running Netspeed against interface:${NC} ${eth}"
echo -ne "${yellow}"
isParm maxSpeed && echo -ne "Given " || echo -ne "Interface "
echo -ne "Max Speed:${NC} ${MS} Mbit/s > $(_netspeed_pretty ${MS_bytes})/s\n"

while true; do ((r++))
  ## Get tabs & window size, minus the differential
  WINDOW_width=$(tput cols)
  WINDOW_now=$(( ${WINDOW_width} - ( TAB_diff * 2 ) ))
  ## So in case the window gets resized we draw a line
  if [ $WINDOW_now -ne $WINDOW_was ]; then 
    TAB_now=$(_netspeed_getTabs)
    tabs $TAB_now
    WINDOW_was=${WINDOW_now}
    echo -e "${blue}$(printf %0${WINDOW_width}s|tr \  '-')${NC}"
  fi

  ## Graph adds a graphical representation on top of the lines
  if isParm graph;then  ##BP: Displays a vertical representation of your usage.
    ## keep for graph comparison
    [ ! -z "$RX_leng" ] && old_RX_leng=${#RX_leng}
    [ ! -z "$TX_leng" ] && old_TX_leng=${#TX_leng}
  fi

  RX_weight=$(( $(cat $RX | xargs) - $RX_start ))
  TX_weight=$(( $(cat $TX | xargs) - $TX_start ))
  TIME_weight=$(( $(date +%s) - $TIME_start ))

  RX_speed=$(( $RX_weight - $RX_end ))
  TX_speed=$(( $TX_weight - $TX_end ))

  ## Why end? cause I'm negative..
  RX_end=$RX_weight
  TX_end=$TX_weight

  ## Get the right values
  TIME_pretty_bottom=$(_netspeed_pretty ${TIME_weight} T 1)
  TIME_pretty=$(date +"%Y-%m-%d %H:%M:%S")

  RX_pretty=$(_netspeed_pretty ${RX_weight} S 1)
  TX_pretty=$(_netspeed_pretty ${TX_weight} S 1)
  RX_speed_pretty=$(_netspeed_pretty ${RX_speed} S 1)
  TX_speed_pretty=$(_netspeed_pretty ${TX_speed} S 1)

  # This is to reset the line
  echo -ne "$(printf %0${WINDOW_now}s|tr \  ' ')\r"
  # This is the output
  echo -ne "${dred}RX:${red}$RX_pretty - ${RX_speed_pretty}/s\t"
  echo -ne "${orange}TX:${yellow}$TX_pretty - ${TX_speed_pretty}/s${NC}\t"
  echo -ne "${dgreen}Time:${green}${TIME_pretty_bottom}\r"

  ## Measure speed and translate it to dots...
  (( $RX_speed )) && RX_leng=$(printf %0$(_netspeed_liner ${RX_speed})s|tr \  "$pipe")
  (( $TX_speed )) && TX_leng=$(printf %0$(_netspeed_liner ${TX_speed})s|tr \  "$pipe")

  RX_leng_output=$RX_leng
  TX_leng_output=$TX_leng
  ## Graph adds a graphical representation on top of the lines
  if isParm graph; then
    RX_leng_output+="${dred}$(_netspeed_graph ${old_RX_leng} ${#RX_leng})${NC}"
    TX_leng_output+="${orange}$(_netspeed_graph ${old_TX_leng} ${#TX_leng})${NC}"
    #RX_leng_output="$(_netspeed_graph ${old_RX_leng} ${#RX_leng})\')"
    #TX_leng_output="$(_netspeed_graph ${old_TX_leng} ${#TX_leng})"
  fi
  # Wait for next check
  sleep 1
 
  echo -ne "$(printf %0${WINDOW_now}s|tr \  ' ')\r"
  echo -e "${dred}##|${red}${RX_leng_output}\t${orange}##|${yellow}${TX_leng_output}\t${dgreen}Time:${green}${TIME_pretty}${NC}"

done
exit 0
## I've never run that fast! -- cit.
